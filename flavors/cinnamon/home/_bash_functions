# Executa o comando em background no diretorio atual
background() {
  $1 . > /dev/null 2>&1 &
}

# chown me all files in dir
reown() {
  GROUP=$(id -gn)
  find . -not -user $USER -exec sudo chown $USER:$GROUP -v {} \;
}

backup() {
  FILENAME=$(basename $(pwd))
  tar -cjvf ../backup-$FILENAME-`date +"%F"`.tar.bz2 --exclude .git --exclude logs  --exclude log .
  echo Created new backup $BACKUP_NAME
}

md5_rename() {
    if [ $# -ne 1 ]; then
        echo "Usage: md5_rename <path>"
        return 1
    fi

    target_dir="$1"

    if [ ! -d "$target_dir" ]; then
        echo "Dir '$target_dir' not exists."
        return 1
    fi

    cd "$target_dir" || return 1

    for filename in *; do
        # Check for regular file
        if [ -f "$filename" ]; then
            filehash=$(md5sum "$filename" | awk '{ print $1 }')
            fileext="${filename##*.}"
            mv -v "$filename" "${filehash}.${fileext}"
        fi
    done
}

# force all running containers to stop
podman-stall() {
  podman ps -q | xargs podman stop
}

# create a tunnel
mytunnel() {
  if [ -z "$1" ] || ! [[ "$1" =~ ^[0-9]+$ ]]; then
    echo "Invalid PORT argument!"
    echo "Usage: mytunnel PORT [-v]"
    return 1
  fi

  local_port=$1
  verbose=""

  shift

  while getopts ":v" opt; do
    case ${opt} in
      v)
        verbose="-v"
        ;;
      \?)
        echo "Invalid option: -$OPTARG" 1>&2
        echo "Usage: mytunnel PORT [-v]"
        return 1
        ;;
    esac
  done
  shift $((OPTIND -1))

  nc -z localhost $local_port
  if [ $? -ne 0 ] ; then
   echo "Fail to connect to port localhost:$local_port"
   return 1
  fi

  echo "Redirecting localhost:$local_port to https://mytunnel.ddns.net"
  ssh $verbose -N -o ServerAliveInterval=20 -R 8000:localhost:$local_port mytunnel.ddns.net
}

# clean all __pycache__ dirs (recursive)
pyclean() {
  find . -type d -name __pycache__ -exec rm -rf {} \;
}
